##ELOQUENT RELATIONSHIP 
#This series is based on the tutorial of Laracasts. I am learning now Laravel Eleqoent . This series has 5 videos. I will learn them one by one. 
#start of first video: 
##Install the following ppackage 
    composer require "laracasts/generators" --dev
##Install laravel testdummy 
     composer  require laracasts/testdummy  --dev
#run the follwoing commands 
    npm install 
    npm run dev     
##Open the config/app.php file and add        
    Laracasts\Generators\GeneratorsServiceProder::class, 
##Create a migration for post using the following command 
    php artisan make:migration:schema create_posts_table --schema="user_id:integer:foreign, title:string,body:text"
    #This command builds the schema automatically. Howeever we need to edit the migration_post table as following 
      Schema::create('posts', function (Blueprint $table) {
            $table->increments('id');
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->string('title');
            $table->text('body');
            $table->timestamps();
        });
##Set up the datbank 
     -> Go to the .env file 
     ->create  necessary database and login  data 
##Run the migrate command to migrate the tables 
    php artisan migrate 
#I  used the command 
    php artisan db:seed posts 
#Then I edited the seeder files lying on the seeds directory 
#add on the post seeds like : 
    TestDummy::times(50)->create('App\Post');
#add the in the main databaseSeeder.php file  also like following 
    public function run()
    {
        // $this->call(UserSeeder::class);
        $this->call(PostsTableSeeder::class);
    }
#Now  create a factory for the Post 
for this use the following command 
    php artisan make:factory PostFactory --model Post 
# After creating a factory for post and User. see database\factories 
#Run  the following command again 
    php artisan db:seed 
#This command will create dummy datasets 
#Alteratively you can go to 
    php artisan tinker  
    factory(App\Post::class,1)->create() // this will create 1 
    factory(App\Post::class,100)->create() // this will create 100  
#create a Comment Model and table etc 
    php artisan make:model Tag -ar 
# Create a resourceful Tag table 
    php artisan make:model Tag  -ar 
#Create a post_tag table 
    php artisan make:migration create_post_tag_table --create=post_tag
#EDit the post_tag table as folllowing 
public function up()
    {
        Schema::create('post_tag', function (Blueprint $table) {
            $table->id();
            $table->unsignedInteger('post_id');
            $table->unsignedInteger('tag_id');

            $table->timestamps();
        });
    }
#Use the following commands 
    php artisan tinker 
    $tag =App\Tag::find(1)
    //Attach this tag to post with post id =10 
    $tag->posts()->attach(10)
    $post =App\Post::where('id', '=', 100)
    //attach the tag with id of 1 with this post 
    $post->tags->attach(1)
    //look at the post 
    $post->tags 
    exit 
  04-09.2020 : 
  #User some more php artisan tinker command 
     php artisan tinker 
     factory(APP\Post::class)->create(['user_id'=>2])
     factory(App\Post::class)->create(['title'=>"second Title"])

  # I revised again the laravel Eleqoent relationship. 
     #Define the user relationship with post 
        public function posts(){
                return $this->hasMany(Post::class);
        }
        $post =App\Post::find(3)
        $post->user 
○ By writing the elequent relationship you can write either default 
			▪ return $this->belongsTo(User::class); // default is 'user_id' or 
			▪ you an specifiy yourself return $this->belongsTo(User::class, 'person_id'); // user_id is specified as 'person_id' 

§ Check it in php tinker 
				□ php artisan tinker 
				□ $article=App\Article::find(5) // 5 is the id of the article 
				□ $article->tags->attach(1) // this  will attach tag 1  with article 5. 
				□ $article->tags->attach([1,2,4]) // three tags were attached 
				□ Now check the linking table of many to many relationship 
				□ $article->tags->dettach([1,2,4]) // you can also deatch the tags 
                You can use withTimestamps () or not 
	#In order to debug laravel, there is a package called laravel debuger . Use this package to debuag . 
	    https://github.com/barryvdh/laravel-debugbar
		composer require barryvdh/laravel-debugbar --dev

#Create model to test Has many through relationship :
    #Aim: 
    #WE have  1. users or writers . They have different affiliation: e.g. left , right, conservative etc.  and then we have posts . These posts are written by the authors or users who have some kind of affiliation. 
    #Now we would like to find out a relationship between the post and affiliation through the users.
    #Find all the posts which have an affiliation "conservative" . 
    #For this we do the following stuffs: 
#   #create a model 
    php artisan make:model  Affiliation -m -f 
    #-m means migration 
    #-f means factory 
#   #Edit the table 
#   # Edit the factories 
    # while creating factory for user, we can use the  affiliation factory in user factory so that it automatically creates the affiliations . 
    #Look at the user factory file and understand the following  code : 
    $factory->define(User::class, function (Faker $faker) { 
    return [
            'name' => $faker->name,
            'email' => $faker->unique()->safeEmail,
            'email_verified_at' => now(),
            'password' => '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password
            'remember_token' => Str::random(10),
            'affiliation_id'=>function (){
                return factory(App\Affiliation::class)->create()->id;
            }
        ];
    });
   #Use the folloiwng command to  create users 
   factory(App\user::class ,10)->create()
   //the follwoing command creates 10 user with affiliation id=3 
   factory(App\User::class, 10)->create(['affiliation_id'=>3])
#Understand the Has many through relationship 
    #make queeries in your datenbank 
    //find all users with afffiliation id =1 
    SELECT * FROM users WHERE affiliation_id=2;
    //find all users with afffiliation id =2 
    SELECT * FROM users WHERE affiliation_id=1;
    select id form user where affiliation_id=1
    SELECT id FROM users WHERE affiliation_id=2;
    SELECT * FROM posts WHERE user_id IN (1,4);
#   #

    



